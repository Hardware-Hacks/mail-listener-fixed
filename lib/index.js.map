{"version":3,"sources":["../src/index.js"],"names":["path","debug","require","formatDate","Date","toISOString","split","eachPromise","data","func","log","Promise","resolve","reject","item","done","catch","then","err","MailListener","options","retry","lastUID","employed","forceStop","haveNewEmails","defaultOptions","filter","mailbox","setSince","markSeen","setFlags","fetchFromNow","fetchOnStart","parserOptions","keepCidLinks","streamAttachments","attachmentOptions","download","directory","imapOptions","connTimeout","authTimeout","retryDelay","keepalive","tlsOptions","maxRetry","stream","imap","on","onError","bind","onClose","onReady","lastFetch","removeAllListeners","connect","end","slice","push","search","uids","length","fetch","uid","locked","bodies","msg","seg","attributes","attrs","emlStream","pipe","parse","mail","eml","buffer","toString","attachments","attachment","generatedFileName","content","emit","once","input","parser","headers","type","Object","keys","forEach","includes","key","chunklen","chunks","chunk","read","Buffer","concat","release","has","replace","m","c","toUpperCase","get","updateImageLinks","contentType","html","from","isBuffer","setTimeout","start","openBox","onMail"],"mappings":"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","file":"index.js","sourcesContent":["import { MailParser } from 'mailparser';\nimport EventEmitter from 'events';\nimport EMLStream from './stream';\nimport IMAP from 'imap';\n\nimport { defaultsDeep } from 'lodash';\nimport { writeFile } from 'fs';\nimport { each } from 'async';\nimport * as path from 'path';\n\nconst debug = require('debug')('imap:listener');\n\nconst formatDate = () => {\n    return new Date().toISOString().split('T')[0];\n};\n\nconst eachPromise = (data, func, log) => {\n    return new Promise((resolve, reject) => {\n        each(data, (item, done) => func(item).catch(log).then(done), err => {\n            if (err) return reject(err);\n            resolve();\n        });\n    });\n};\n\nexport default class MailListener extends EventEmitter {\n    \n    constructor(options) {\n        super();\n        this.retry = 0;\n        this.lastUID = 0;\n        this.employed = false;\n        this.forceStop = false;\n        this.haveNewEmails = false;\n        this.defaultOptions = {\n            filter: ['UNSEEN'],\n            mailbox: 'INBOX',\n            setSince: true,\n            markSeen: false,\n            setFlags: false,\n            fetchFromNow: true,\n            fetchOnStart: false,\n            parserOptions: {\n                keepCidLinks: false,\n                streamAttachments: false\n            },\n            attachmentOptions: {\n                download: false,\n                directory: ''\n            },\n            imapOptions: {\n                connTimeout: 10000,\n                authTimeout: 5000,\n                retryDelay: 1000,\n                keepalive: true,\n                tlsOptions: {},\n                debug: debug,\n                maxRetry: 3\n            }\n        };\n        this.options = defaultsDeep(options, this.defaultOptions);\n        this.options.filter = typeof this.options.filter === 'string' ? [this.options.filter] : this.options.filter;\n        this.options.parserOptions.streamAttachments = this.options.attachmentOptions.download && this.options.attachmentOptions.stream;\n        this.imap = new IMAP(this.options.imapOptions);\n        this.imap.on('error', this.onError.bind(this));\n        this.imap.on('close', this.onClose.bind(this));\n        this.imap.on('ready', this.onReady.bind(this));\n        this.lastFetch = this.options.fetchFromNow;\n    }\n    \n    start() {\n        debug('detaching existing listener');\n        this.imap.removeAllListeners('update');\n        this.imap.removeAllListeners('mail');\n\n        debug('calling imap connect');\n        this.imap.connect();\n    }\n    \n    stop() {\n        this.forceStop = true;\n        this.imap.end();\n    }\n    \n    search() {\n        let filter = this.options.filter.slice();\n        if (this.lastFetch === true) this.lastFetch = formatDate();\n        if (this.lastFetch === false) this.lastFetch = new Date(0);\n        if (this.options.setSince) filter.push([\"SINCE\", this.lastFetch]);\n        this.lastFetch = formatDate();\n        this.imap.search(filter, (err, uids) => {\n            if (err) return this.onError(err);\n            if (uids.length > 0) {\n                if (this.options.setFlags) {\n                    this.imap.setFlags(uids, ['\\\\Seen'], err => {\n                         if (err) this.onError(err);\n                    });\n                }\n                return eachPromise(uids, this.fetch.bind(this), this.onError.bind(this))\n                    .catch(this.onError)\n                    .then(() => {\n                        debug('all processed');\n                        if (this.haveNewEmails) {\n                            this.haveNewEmails = false;\n                            return this.search();\n                        }\n                        this.employed = false;\n                    });\n            }\n            if (this.haveNewEmails) {\n                this.haveNewEmails = false;\n                return this.search();\n            }\n            this.employed = false;\n        });\n    }\n    \n    fetch(uid) {\n        let locked = false;\n        return new Promise((resolve, reject) => {\n            if (this.lastUID >= uid) return resolve();\n            let fetch = this.imap.fetch(uid, {\n                markSeen: this.options.markSeen,\n                bodies: ''\n            });\n            fetch.on('message', (msg, seg) => {\n                locked = true;\n                let attributes = null;\n                msg.on('attributes', attrs => {\n                    attributes = attrs;\n                });\n                msg.on('body', stream => {\n                    let emlStream = new EMLStream();\n                    stream.pipe(emlStream);\n                    this.parse(emlStream)\n                        .then(mail => {\n                            if (!mail) mail = {};\n                            mail.eml = emlStream.buffer.toString('utf-8');\n                            if (!this.options.parserOptions.streamAttachments && this.options.attachmentOptions.download && mail.attachments) {\n                                return eachPromise(mail.attachments, attachment => {\n                                    return new Promise((resolve, reject) => {\n                                        writeFile(this.options.attachmentOptions.directory + attachment.generatedFileName, attachment.content, err => {\n                                            if (err) return reject(err);\n                                            attachment.path = path.resolve(this.options.attachmentOptions.directory + attachment.generatedFileName);\n                                            this.emit('attachment', attachment);\n                                            resolve();\n                                        });  \n                                    });\n                                }, this.onError.bind(this)).catch(this.onError.bind(this)).then(() => mail);\n                            }\n                            return mail;\n                            \n                        })\n                        .then(mail => {\n                            if (!attributes) attributes = {};\n                            if (!attributes.uid) attributes.uid = uid;\n                            if (this.lastUID < uid) this.lastUID = uid;\n                            this.emit('mail', mail, seg, attributes);\n                            resolve();\n                        })\n                        .catch(reject);\n                });\n            });\n            fetch.once('error', this.onError);\n            fetch.once('end', () => {\n                if (!locked) resolve();\n            });\n        });\n    }\n    \n    parse(input) {\n        let mail = {\n            attachments: []\n        };\n        return new Promise((resolve, reject) => {\n            let parser = new MailParser(this.options.parserOptions);\n            parser.on('headers', headers => {\n                mail.headers = headers;\n            });\n            parser.on('data', data => {\n                if (data.type === 'text') {\n                    Object.keys(data).forEach(key => {\n                        if (['text', 'html', 'textAsHtml'].includes(key)) {\n                            mail[key] = data[key];\n                        }\n                    });\n                }\n                if (data.type === 'attachment') {\n                    if (this.options.attachmentOptions.download) mail.attachments.push(data);\n                    this.emit('attachment', data);\n\n                    let chunklen = 0;\n                    let chunks = [];\n                    \n                    data.content.on('readable', () => {\n                        let chunk;\n                        while ((chunk = data.content.read()) !== null) {\n                            chunklen += chunk.length;\n                            chunks.push(chunk);\n                        }\n                    });\n                    data.content.on('end', () => {\n                        data.content = Buffer.concat(chunks, chunklen);\n                        data.release();\n                    });\n                }\n            });\n            parser.on('end', () => {\n                ['subject', 'references', 'date', 'to', 'from', 'to', 'cc', 'bcc', 'message-id', 'in-reply-to', 'reply-to'].forEach(key => {\n                    if (mail.headers.has(key)) mail[key.replace(/-([a-z])/g, (m, c) => c.toUpperCase())] = mail.headers.get(key);\n                });\n                \n                if (this.options.parserOptions.keepCidLinks) return resolve(mail);\n                \n                parser.updateImageLinks(\n                    (attachment, done) => done(false, 'data:' + attachment.contentType + ';base64,' + attachment.content.toString('base64')),\n                    (err, html) => {\n                        if (err) return reject(err);\n                        mail.html = html;\n                        resolve(mail);\n                    }\n                );\n            });\n            \n            if (typeof input === 'string') parser.end(Buffer.from(input));\n            else if (Buffer.isBuffer(input)) parser.end(input);\n            else input.pipe(parser);\n        });\n    }\n\n    onError(err) {\n        this.emit('error', err);\n    }\n\n    onClose() {\n        if (!this.forceStop && this.retry < this.options.imapOptions.maxRetry) {\n            setTimeout(() => {\n                debug(\"Trying to establish imap connection again...\");\n                this.start()\n            }, this.options.imapOptions.retryDelay);\n            return this.retry++;\n        }\n        this.emit('disconnected'); debug('disconnected');\n        this.forceStop = false;\n        this.retry = 0;\n    }\n\n    onReady() {\n        this.imap.openBox(this.options.mailbox, false, err => {\n            if (err) return this.onError(err);\n            this.emit('connected'); debug('connected');\n            if (this.options.fetchOnStart) this.search();\n            this.imap.on('mail', this.onMail.bind(this));\n            this.imap.on('update', this.onMail.bind(this));\n        });\n    }\n    \n    onMail() {\n        if (!this.haveNewEmails && !this.employed) { \n            this.employed = true;\n            this.search();\n        }\n        else if (this.employed) this.haveNewEmails = true;\n    }\n    \n}\n"]}